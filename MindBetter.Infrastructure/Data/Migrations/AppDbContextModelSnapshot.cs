// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MindBetter.Infrastructure.Data;

#nullable disable

namespace MindBetter.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("MindBetter.Core.Model.NonProfitAggregate.NonProfit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WebsiteURL")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NonProfit", (string)null);
                });

            modelBuilder.Entity("MindBetter.Core.Model.NonProfitAggregate.PermissionTypeLookup", b =>
                {
                    b.Property<int>("EnumVal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EnumVal");

                    b.ToTable("PermissionTypesLookup", (string)null);

                    b.HasData(
                        new
                        {
                            EnumVal = 1,
                            Description = "Administrator",
                            Name = "Admin"
                        },
                        new
                        {
                            EnumVal = 2,
                            Description = "Editor",
                            Name = "Editor"
                        },
                        new
                        {
                            EnumVal = 3,
                            Description = "Member",
                            Name = "Member"
                        });
                });

            modelBuilder.Entity("MindBetter.Core.Model.NonProfitAggregate.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("NonProfitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NonProfitId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("MindBetter.Core.Model.NonProfitAggregate.ServiceCategoryLookup", b =>
                {
                    b.Property<int>("EnumVal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EnumVal");

                    b.ToTable("ServiceCategoryLookup", (string)null);

                    b.HasData(
                        new
                        {
                            EnumVal = 1,
                            Description = "Cat1",
                            Name = "Cat1"
                        },
                        new
                        {
                            EnumVal = 2,
                            Description = "Cat2",
                            Name = "Cat2"
                        },
                        new
                        {
                            EnumVal = 3,
                            Description = "Cat3",
                            Name = "Cat3"
                        });
                });

            modelBuilder.Entity("MindBetter.Core.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("MindBetter.Core.Model.NonProfitAggregate.Member", b =>
                {
                    b.HasBaseType("MindBetter.Core.Model.User");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NonProfitId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PermissionType")
                        .HasColumnType("INTEGER");

                    b.HasIndex("NonProfitId");

                    b.ToTable("NonProfitMember", (string)null);
                });

            modelBuilder.Entity("MindBetter.Core.Model.NonProfitAggregate.Service", b =>
                {
                    b.HasOne("MindBetter.Core.Model.NonProfitAggregate.NonProfit", "NonProfit")
                        .WithMany("Services")
                        .HasForeignKey("NonProfitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NonProfit");
                });

            modelBuilder.Entity("MindBetter.Core.Model.NonProfitAggregate.Member", b =>
                {
                    b.HasOne("MindBetter.Core.Model.User", null)
                        .WithOne()
                        .HasForeignKey("MindBetter.Core.Model.NonProfitAggregate.Member", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MindBetter.Core.Model.NonProfitAggregate.NonProfit", "NonProfit")
                        .WithMany("Members")
                        .HasForeignKey("NonProfitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NonProfit");
                });

            modelBuilder.Entity("MindBetter.Core.Model.NonProfitAggregate.NonProfit", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
